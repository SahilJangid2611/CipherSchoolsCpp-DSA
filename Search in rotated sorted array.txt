Problem: Search in Rotated Sorted Array

You are given a sorted array that has been rotated by some arbitrary pivot. For example, [4, 5, 6, 7, 0, 1, 2] might be rotated at pivot 4 to become [0, 1, 2, 4, 5, 6, 7].

Write a function to determine if a target integer exists in the array. If the target is found in the array, return its index; otherwise, return -1.

Example:

Input: nums = [4, 5, 6, 7, 0, 1, 2], target = 0

Output: 4 (because 0 is found at index 4)

---------------Solution------------------

#include <iostream>
#include <vector>
using namespace std;

int search(vector<int>& nums, int target){
  int left = 0;
  int right = nums.size() - 1;
  
  while(left<=right){
    int mid = left + (right - left)/2;
    
    if(nums[mid] == target){
      return mid;
    }
     //if left array is sorted
    if(nums[left] <= nums[mid]){
      if(nums[left] <= target && nums[mid] > target){
        right = mid - 1;
      } else{
        left = mid + 1;
      }
    } else { //right array is sorted
      if(nums[mid] < target && nums[right] >= target){
        left = mid + 1;
      } else{
        right = mid - 1;
      }
    }
  }
  
  return -1;
}

int main() 
{
  vector<int> nums = {4, 5, 6, 7, 0, 1, 2};
  int target = 0;
  int index = search(nums,target);
  
  cout << index;
   
    return 0;
}