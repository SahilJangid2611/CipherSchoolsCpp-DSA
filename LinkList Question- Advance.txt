Add Two Numbers:
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return it as a linked list. Example: (2 -> 4 -> 3) + (5 -> 6 -> 4) -> 7 -> 0 -> 8

Merge k Sorted Lists:
Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity. Example: [[1 -> 4 -> 5], [1 -> 3 -> 4], [2 -> 6]] -> 1 -> 1 -> 2 -> 3 -> 4 -> 4 -> 5 -> 6

Copy List with Random Pointer:
A linked list is given where each node contains an additional random pointer which could point to any node in the list or null. Return a deep copy of the list. Example: Input: {"$id":"1","next":{"$id":"2","next":null,"random":{"$ref":"2"},"val":2},"random":{"$ref":"2"},"val":1}

LRU Cache:
Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put. Example: LRUCache cache = new LRUCache(2); cache.put(1, 1); cache.put(2, 2); cache.get(1); // returns 1

Reverse Nodes in k-Group:
Given a linked list, reverse the nodes of a linked list k at a time and return its modified list. k is a positive integer and is less than or equal to the length of the linked list. Example: 1 -> 2 -> 3 -> 4 -> 5 with k = 3 -> 3 -> 2 -> 1 -> 4 -> 5

Intersection of Two Linked Lists:
Write a program to find the node at which the intersection of two singly linked lists begins. Example: A: 4 -> 1 -> 8 -> 4 -> 5, B: 5 -> 6 -> 1 -> 8 -> 4 -> 5 -> intersection at node with value 8

Palindrome Linked List:
Given a singly linked list, determine if it is a palindrome. Example: 1 -> 2 -> 2 -> 1 -> true, 1 -> 2 -> false

Flatten a Multilevel Doubly Linked List:
Flatten a multilevel doubly linked list. Each node has a next, a prev, and a child. Example: 1 <-> 2 <-> 3 <-> 4 <-> 5 with child 2 <-> 6 <-> 7 -> 1 <-> 2 <-> 6 <-> 7 <-> 3 <-> 4 <-> 5

Rotate List:
Given a linked list, rotate the list to the right by k places, where k is non-negative. Example: 1 -> 2 -> 3 -> 4 -> 5 with k = 2 -> 4 -> 5 -> 1 -> 2 -> 3

Reverse Linked List II:
Reverse a linked list from position m to n. Do it in one-pass. Example: 1 -> 2 -> 3 -> 4 -> 5, m = 2, n = 4 -> 1 -> 4 -> 3 -> 2 -> 5