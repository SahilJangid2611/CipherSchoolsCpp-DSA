https://leetcode.com/problems/min-stack/description/

Evaluate Reverse Polish Notation:
Evaluate the value of an arithmetic expression in Reverse Polish Notation. Valid operators are +, -, *, /. Each operand and operator is separated by a space. The input is guaranteed to be valid. Example: ["2", "1", "+", "3", "*"] -> 9

Min Stack:
Design a stack that supports push, pop, top, and retrieving the minimum element in constant time. Push, pop, top should operate in O(1) time. Example: push(-2), push(0), push(-3), getMin() -> -3, pop(), top() -> 0, getMin() -> -2

Decode String:
Given an encoded string, return its decoded string. The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is repeated exactly k times. Assume the input string is always valid. Example: "3[a]2[bc]" -> "aaabcbc"

Exclusive Time of Functions:
Given the logs of a CPU, output the exclusive time of each function. You are given the logs of a CPU where logs[i] represents a thread of the function id and a label "start" and "end" and the timestamp. Example: ["0:start:0","1:start:2","1:end:5","0:end:6"] -> [3, 4]

Longest Valid Parentheses:
Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring. Example: "(()" -> 2, ")()())" -> 4

Trapping Rain Water:
Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining. Example: [0,1,0,2,1,0,1,3,2,1,2,1] -> 6

Binary Tree Inorder Traversal without Recursion:
Implement the inorder traversal of a binary tree without using recursion. Example: Input: [1,null,2,3] -> [1,3,2]

Simplify Path:
Given an absolute path for a file (Unix-style), simplify it. Example: "/home/" -> "/home", "/a/./b/../../c/" -> "/c"

Evaluate Expression:
Evaluate the value of an arithmetic expression in infix notation using stacks. Example: "3 + (6 * 2) / (1 + 2)" -> 8

Valid Parenthesis String:
Given a string containing only three types of characters: '(', ')', and '*', check whether this string is valid. Example: "(*()" -> true, "((()" -> false