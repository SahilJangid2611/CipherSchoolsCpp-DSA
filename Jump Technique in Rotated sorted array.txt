Problem: Search in Rotated Sorted Array

You are given a sorted array that has been rotated by some arbitrary pivot. For example, [4, 5, 6, 7, 0, 1, 2] might be rotated at pivot 4 to become [0, 1, 2, 4, 5, 6, 7].

Write a function to determine if a target integer exists in the array. If the target is found in the array, return its index; otherwise, return -1

---------------------Solution-----------------------

#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

int findPivot(vector<int>& nums){
  int left = 0;
  int right = nums.size() - 1;
  
  while(left < right){
    int mid = left + (right - left)/2;
    if(nums[mid] > nums[right]){
      left = mid + 1;
    }else{
      right = mid;
    }
    return left;
  }
}

int jumpSearch(vector<int>& nums, int target){
  int n = nums.size();
  int step = sqrt(n);
  
  int pivot = findPivot(nums);
  
  if(nums[pivot] == target){
    return pivot;
  } 
  
  if(target >= nums[0] && target <=nums[pivot - 1] ){
    int prev = 0;
    
    while(nums[min(pivot,prev + step) - 1] < target){
      prev += step;
      if(prev >= pivot){
        return -1;
      }
    }
    while(nums[prev] < target){
      prev++;
      if(prev == min(pivot,n)){
        return -1;
      }
    }
    
    if(nums[prev] == target){
      return prev;
    }
  } else {
    int prev = pivot;
    //to search in right sorted part
    while(prev < n && nums[min(n-1,prev + step) - 1] < target){
      prev += step;
      if(prev >= n){
        return -1;
      }
    }
    //linear search
    while(prev < n && nums[prev] < target){
        prev++;
        if(prev < n && nums[prev] == target){
          return prev;
        }
    }
  }
  return -1;
}

int main() 
{
  vector<int> nums = {4, 5, 6, 7, 0, 1, 2};
  int target = 0;
  int index = jumpSearch(nums,target);
  
  cout << index;
   
    return 0;
}